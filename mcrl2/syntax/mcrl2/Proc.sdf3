module mcrl2/Proc

imports

  mcrl2/Common
  mcrl2/Sort
  mcrl2/Data

template options

  keyword -/- [a-zA-Z\_0-9\'] // require layout after a keyword

context-free syntax //--- Communication and renaming sets

  MCRL2-ActIdSet = <{<{MCRL2-ID ", "}+>}>

  MCRL2-MultActId  = <<{MCRL2-ID " | "}+>>
  MCRL2-MultActId2 = <<MCRL2-ID> | <{MCRL2-ID " | "}+>>

  MCRL2-MultActIdSet = <{<{MCRL2-MultActId ", "}*>}>

  MCRL2-CommExpr.CommExpr = [[MCRL2-MultActId2] -> [MCRL2-ID]]

  MCRL2-CommExprSet = <{<{MCRL2-CommExpr ", "}*>}>

  MCRL2-RenExpr.RenExpr = [[MCRL2-ID] -> [MCRL2-ID]]

  MCRL2-RenExprSet = <{<{MCRL2-RenExpr ", "}*>}>

context-free syntax //--- Process expressions

  MCRL2-ProcExpr.Proc_Action = <<MCRL2-ID><MCRL2-Action-Args>> // = Action
  MCRL2-ProcExpr.ProcAssign  = <<MCRL2-ID>(<{MCRL2-Assignment ", "}*>)>
  MCRL2-ProcExpr.Delta       = <delta>
  MCRL2-ProcExpr.Tau         = <tau>
  MCRL2-ProcExpr.Block       = <block (<MCRL2-ActIdSet>, <MCRL2-ProcExpr>)>
  MCRL2-ProcExpr.Allow       = <allow (<MCRL2-MultActIdSet>, <MCRL2-ProcExpr>)>
  MCRL2-ProcExpr.Hide        = <hide (<MCRL2-ActIdSet>, <MCRL2-ProcExpr>)>
  MCRL2-ProcExpr.Rename      = <rename (<MCRL2-RenExprSet>, <MCRL2-ProcExpr>)>
  MCRL2-ProcExpr.Comm        = <comm (<MCRL2-CommExprSet>, <MCRL2-ProcExpr>)>
  MCRL2-ProcExpr             = <(<MCRL2-ProcExpr>)> {bracket}
  MCRL2-ProcExpr.Choice      = <<MCRL2-ProcExpr> + <MCRL2-ProcExpr>> {left}
  MCRL2-ProcExpr.Sum         = <sum <{MCRL2-VarsDecl ", "}+> . <MCRL2-ProcExpr>> {right}
  MCRL2-ProcExpr.Par         = <<MCRL2-ProcExpr> || <MCRL2-ProcExpr>> {right}
//ProcExpr.LeftMerge   = <<ProcExpr> ||_ <ProcExpr>> {right} // problems with ||
  MCRL2-ProcExpr.IfThen      = [[MCRL2-DataExpr] -> [MCRL2-ProcExpr]] {right}
  MCRL2-ProcExpr.IfThenElse  = [[MCRL2-DataExpr] -> [MCRL2-ProcExpr] <> [MCRL2-ProcExpr]] {right}
  MCRL2-ProcExpr.Until       = [[MCRL2-ProcExpr] << [MCRL2-ProcExpr]] {left}
  MCRL2-ProcExpr.Seq         = <<MCRL2-ProcExpr> . <MCRL2-ProcExpr>> {right}
  MCRL2-ProcExpr.At          = <<MCRL2-ProcExpr> @ <MCRL2-DataExpr>> {left}
  MCRL2-ProcExpr.CommMerge   = <<MCRL2-ProcExpr> | <MCRL2-ProcExpr>> {left}
  MCRL2-ProcExpr.Dist        = <dist <{MCRL2-VarDecl ", "}+> [<MCRL2-DataExpr>] . <MCRL2-ProcExpr>> {right}

context-free syntax //--- Actions

  MCRL2-Action.Action = <<MCRL2-ID><MCRL2-Action-Args>>
  MCRL2-Action-Args = {ast("[]")}
  MCRL2-Action-Args = <(<{MCRL2-DataExpr ", "}+>)>

  MCRL2-ActDecl.ActDecl = <<{MCRL2-ID ", "}+><MCRL2-ActDecl-Sort?>;>
  MCRL2-ActDecl-Sort = <: <MCRL2-SortProduct>>

  MCRL2-ActSpec.ActSpec = <act <MCRL2-ActDecl+>>

//MultAct = ... omitted ...

context-free syntax //--- Process and initial state declaration

  MCRL2-ProcDecl.ProcDecl = <<MCRL2-ID><MCRL2-ProcDecl-Args> = <MCRL2-ProcExpr>;>
  MCRL2-ProcDecl-Args = {ast("[]")}
  MCRL2-ProcDecl-Args = <(<{MCRL2-VarsDecl ", "}+>)>

  MCRL2-ProcSpec.ProcSpec = <proc <MCRL2-ProcDecl+>>

  MCRL2-Init.Init = <init <MCRL2-ProcExpr>;>

context-free priorities

  /* 11 */ { left:
    MCRL2-ProcExpr.CommMerge
  }
  >
  /* 10 */ { left:
    MCRL2-ProcExpr.At
  }
  >
  /* 9 */ { right:
    MCRL2-ProcExpr.Seq
  }
  >
  /* 6 */ { right:
    MCRL2-ProcExpr.IfThenElse
  }
  >
  /* 5 */ { right:
    MCRL2-ProcExpr.IfThen
  }
  >
  /* 3 */ { right:
    MCRL2-ProcExpr.Par
  }
  >
  /* 2 */ { right:
    MCRL2-ProcExpr.Sum
    MCRL2-ProcExpr.Dist
  }
  >
  /* 1 */ { left:
    MCRL2-ProcExpr.Choice
  }
