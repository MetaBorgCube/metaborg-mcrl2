module mcrl2/Proc

imports

  mcrl2/Common
  mcrl2/Sort
  mcrl2/Data

template options

  keyword -/- [a-zA-Z\_0-9\'] // require layout after a keyword

context-free syntax //--- Communication and renaming sets

  ActIdSet = <{<{ID ", "}+>}>

  MultActId  = <<{ID " | "}+>>
  MultActId2 = <<ID> | <{ID " | "}+>>

  MultActIdSet = <{<{MultActId ", "}*>}>

  CommExpr.CommExpr = [[MultActId2] -> [ID]]

  CommExprSet = <{<{CommExpr ", "}*>}>

  RenExpr.RenExpr = [[ID] -> [ID]]

  RenExprSet = <{<{RenExpr ", "}*>}>

context-free syntax //--- Process expressions

  ProcExpr.Proc_Action = <<ID><Action-Args>> // = Action
  ProcExpr.ProcAssign  = <<ID>(<{Assignment ", "}*>)>
  ProcExpr.Delta       = <delta>
  ProcExpr.Tau         = <tau>
  ProcExpr.Block       = <block (<ActIdSet>, <ProcExpr>)>
  ProcExpr.Allow       = <allow (<MultActIdSet>, <ProcExpr>)>
  ProcExpr.Hide        = <hide (<ActIdSet>, <ProcExpr>)>
  ProcExpr.Rename      = <rename (<RenExprSet>, <ProcExpr>)>
  ProcExpr.Comm        = <comm (<CommExprSet>, <ProcExpr>)>
  ProcExpr             = <(<ProcExpr>)> {bracket}
  ProcExpr.Choice      = <<ProcExpr> + <ProcExpr>> {left}
  ProcExpr.Sum         = <sum <{VarsDecl ", "}+> . <ProcExpr>> {right}
  ProcExpr.Par         = <<ProcExpr> || <ProcExpr>> {right}
//ProcExpr.LeftMerge   = <<ProcExpr> ||_ <ProcExpr>> {right} // problems with ||
  ProcExpr.IfThen      = [[DataExpr] -> [ProcExpr]] {right}
  ProcExpr.IfThenElse  = [[DataExpr] -> [ProcExpr] <> [ProcExpr]] {right}
  ProcExpr.Until       = [[ProcExpr] << [ProcExpr]] {left}
  ProcExpr.Seq         = <<ProcExpr> . <ProcExpr>> {right}
  ProcExpr.At          = <<ProcExpr> @ <DataExpr>> {left}
  ProcExpr.CommMerge   = <<ProcExpr> | <ProcExpr>> {left}
  ProcExpr.Dist        = <dist <{VarDecl ", "}+> [<DataExpr>] . <ProcExpr>> {right}

context-free syntax //--- Actions

  Action.Action = <<ID><Action-Args>>
  Action-Args =                         {ast("[]")}
  Action-Args = <(<{DataExpr ", "}+>)>

  ActDecl.ActDecl = <<{ID ", "}+><ActDecl-Sort?>;>
  ActDecl-Sort = <: <SortProduct>>

  ActSpec.ActSpec = <act <ActDecl+>>

//MultAct = ... omitted ...

context-free syntax //--- Process and initial state declaration

  ProcDecl.ProcDecl = <<ID><ProcDecl-Args> = <ProcExpr>;>
  ProcDecl-Args =                         {ast("[]")}
  ProcDecl-Args = <(<{VarsDecl ", "}+>)>

  ProcSpec.ProcSpec = <proc <ProcDecl+>>

  Init.Init = <init <ProcExpr>;>

context-free priorities

  /* 11 */ { left:
    ProcExpr.CommMerge
  }
  >
  /* 10 */ { left:
    ProcExpr.At
  }
  >
  /* 9 */ { right:
    ProcExpr.Seq
  }
  >
  /* 6 */ { right:
    ProcExpr.IfThenElse
  }
  >
  /* 5 */ { right:
    ProcExpr.IfThen
  }
  >
  /* 3 */ { right:
    ProcExpr.Par
  }
  >
  /* 2 */ { right:
    ProcExpr.Sum
    ProcExpr.Dist
  }
  >
  /* 1 */ { left:
    ProcExpr.Choice
  }
