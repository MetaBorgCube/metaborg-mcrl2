module syntax/context-free/disambiguation/dataexpressionunit
language mcrl2
start symbol MCRL2-Spec

test bracket allowed [[
 init tau@(5+5);
]] parse succeeds

test eqn call with no args allowed [[
	init x -> tau <> delta;
	map x : Bool;
	eqn x = true;
]] parse succeeds

test number allowed [[
	init tau@6;
]] parse succeeds

test false allowed [[
	init false -> tau <> delta;
]] parse succeeds

test true allowed [[
	init true -> tau;
]] parse succeeds

test eqn call with args allowed [[
	init x(5) -> tau <> delta;
	map x : Int -> Bool;
	var y:Int; eqn x(y) = true;
]] parse succeeds

test size is allowed on bracket [[
	init tau@#([1,2]);
]] parse succeeds

test minus allowed on number [[
	init tau@-5;
]] parse succeeds

test negation allowed on func call [[
	init !x -> tau;
	map x :Bool;
	eqn x = false;
]] parse succeeds

/*

// the actual mCRL2 parser does not allow operators on the left side of an if-statement
// wrapping the expression in parentheses is allowed though.
// TODO: I don't know how to generate these kinds of warnings in the NaBL2 analysis
test no operators allowed (=>) [[
	init [[5>4=>5>3]] -> tau <> delta; 
]] 1 warning

test no operators allowed (||) [[
	init [[true || false]] -> tau;
]] 1 warning

test no operators allowed (&&) [[
	init [[true && true]] -> tau;
]] 1 warning

test no operators allowed (==) [[
	init [[5==5]] -> tau;
]] 1 warning

test no operators allowed (!=) [[
	init [[5!=5]] -> tau <> delta;
]] 1 warning

test no operators allowed (<=) [[
	init [[5<=5]] -> tau <> delta;
]] 1 warning

test no operators allowed (>=) [[
	init [[5>=5]] -> tau <> delta;
]] 1 warning

test no operators allowed (<) [[
	init [[5<5]] -> tau <> delta;
]] 1 warning

test no operators allowed (>) [[
	init [[5>5]] -> tau <> delta;
]] 1 warning

test no operators allowed (!=) [[
	init [[5 in ([1,2])]] -> tau <> delta;
]] 1 warning

test no operators allowed (|>) [[
	init (3 in 5 |> [3,4]) -> tau <> delta;
]] 1 warning

test no operators allowed (<|) [[
	init [[3 in [1] <| 2]] -> tau <> delta;
]] 1 warning

test no operators allowed (++) [[
	init [[ 5 in [1] ++ [2] ]] -> tau <> delta;
]] 1 warning

test no operators allowed (+) [[
	init tau@[[5+5]];
]] 1 warning

test no operators allowed (-) [[
	init tau@[[5-5]];
]] 1 warning

test no operators allowed (/) [[
	init tau@[[5/5]];
]] 1 warning

test no operators allowed (div) [[
	init tau@[[5 div 2]];
]] 1 warning

test no operators allowed (mod) [[
	init tau@[[5 mod 2]];
]] 1 warning

test no operators allowed (*) [[
	init tau@[[5*7]];
]] 1 warning

test no operators allowed (.) [[
	init tau@[[ [1,2,3] . 1 ]];
]] 1 warning

test no where clause allowed [[
	init [[x whr x=true end]] -> tau <> delta;
]] 1 warning

test if then else, no bags allowed [[
	act a;
	init [[{:}]]->a<>tau;
]] 1 error

test if, no lists allowed [[
	init [[ [] ]] -> tau;
]] 1 error

*/