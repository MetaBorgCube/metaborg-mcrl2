module datapriorities
language mcrl2
start symbol MCRL2Spec

// I only care about getting the priorities and association right,
// not about the semantics!

test low priority unaries [[
	init x(forall x: Nat . exists y: Nat . lambda z:Nat . z => true);
]] parse to [[init x( forall x: Nat . (exists y: Nat . (lambda z:Nat . (z => true)) ) );]]

test function update and application have the same priority [[
	init x(y[5->4](5)[7->1]);
]] parse to [[init x( (((y) [5->4]) (5)) [7->1] );]]

test negation, minus, length have the same priority [[
	init x(!-#!5);
]] parse to [[init x(!(-(#(!5))));]]

// note that the  * [3] . 0 should cause a type error
test ElementAt and Multiplication have the same priority [[
	init x([5] . 0 * [3] . 0);
]] parse to [[init x( ( ([5].0) * [3]) . 0);]]

test Div, IntDiv and Mod have same priority (one way) [[
	init x(5 div 4 mod 3 / 2);
]] parse to [[init x( ((5div 4) mod 3) / 2);]]

test Div, IntDiv and Mod have same priority (other way) [[
	init x(5 / 4 mod 3 div 2);
]] parse to [[init x( ((5/ 4) mod 3) div 2);]]

test plus and minus have the same priorities [[
	init x(5+4-3+2);
]] parse to [[init x( ((5+4) -3) +2 );]]

test math comparison operators have the same priority (one way) [[
	init x(6 in 5>4<3>=2<=1);
]] parse to [[init x( ((((6 in 5)>4)<3)>=2)<=1 );]]

test math comparison operators and 'in' have the same priority (other way) [[
	init x(5<=4>=3<2>1 in [true]);
]] parse to [[init x( ((((5<=4)>=3)<2)>1) in [true] );]]

test equality operators have the same priority [[
	init x(5==4!=3==2);
]] parse to [[init x( ((5==4)!=3)==2 );]]

test unary minus and elementAt have the same priority [[
	init x(-[5].0);
]] parse to [[init x( (-[5]).0 );]]


test Negation has lower priority than FunctionApplication [[
	init x(!y(5));
]] parse to [[init x(!(y(5)));]]

test UnaryMinus has lower priority than FunctionApplication [[
	init x(-y(5));
]] parse to [[init x(-(y(5)));]]

test Length has lower priority than FunctionApplication [[
	init x(#y(5));
]] parse to [[init x(#(y(5)));]]

test multiplication binds stronger than mod [[
	init x(4 mod 3 * 2);
]] parse to [[init x( 4 mod (3 * 2) );]]

test division binds stronger than plus [[
	init x(4 + 3 / 2);
]] parse to [[init x(4 + (3/2));]]

test minus binds stronger than list concatenation [[
	init x([]++5-4);
]] parse to [[init x( []++(5-4) );]]

test list concatenation binds stronger than last list constructor [[
	init x( []++[1,2]<|[]++[1] );
]] parse to [[init x( ([]++[1,2]) <| ([]++[1]) );]]

test last constructor binds stronger than head constructor [[
	init x( 3 |> [1] <| 2 );
]] parse to [[init x( 3|>([1]<|2) );]]

test head constructor binds stronger than 'in' [[
	init x( 5 in 4 <| [] );
]] parse to [[init x( 5 in (4<|[]) );]]

test less than binds stronger than equals [[
	init x( true == 4 < 3 );
]] parse to [[init x( true == (4<3) );]]

test not equals binds stronger than and [[
	init x (true && 5 != 4);
]] parse to [[init x( true && (5!=4) );]]

test and binds stronger than or [[
	init x (false || true && false);
]] parse to [[init x( false || (true && false) );]]

test or binds stronger than implication [[
	init x ( 5 => true || false );
]] parse to [[init x( 5=>(true || false) );]]

test implication binds stronger than forall [[
	init x( forall y:Nat . y>5 => y>4 );
]] parse to [[init x( forall y:Nat . ((y>5)=>(y>4)) );]]

test forall binds stronger than where clause [[
	init x( forall y:Int . y>x whr x = 3 end  );
]] parse to [[init x( (forall y:Int . (y>x)) whr x=3 end );]]
