module eqn
language mcrl2
start symbol MCRL2Spec

fixture [[
	init delta;
	map plusOne : Nat -> Pos;
		get : Pos;
		yes : Bool;
		getList : List(Int);
		getSet : Set(Int);
		getBag : Bag(Int);
		arg1 : Pos -> Pos;
		arg2 : Pos -> Pos;
		getInt : Int;
		_weirdname : Pos;
		[[...]]
]]

test layout after eqn required [[
	var p:Pos; eqn_weirdname=p;
]] parse fails

test id as result [[
	var p:Pos;
	eqn get = p;
]] parse succeeds

test number as result [[
	eqn get = 5;
]] parse succeeds

test true as result [[
	eqn yes = true;
]] parse succeeds

test false as result [[
	eqn yes = false;
]] parse succeeds

test empty list as result [[
	eqn getList = [];
]] parse succeeds

test single element list as result [[
	eqn getList = [1];
]] parse succeeds

test multiple elements in list as result [[
	eqn getList = [1,2,3];
]] parse succeeds

test empty set as result [[
	eqn getSet = {};
]] parse succeeds

test single element set as result [[
	eqn getSet = {99};
]] parse succeeds

test multiple elements in a set as result [[
	eqn getSet = {3, 15, 66};
]] parse succeeds

test empty bag as result [[
	eqn getBag = {:};
]] parse succeeds

test single element bag as result [[
	eqn getBag = {1:5};
]] parse succeeds

test multiple elements in a bag as result [[
	eqn getBag = {1:5, 5:2};
]] parse succeeds

test set comprehension as result [[
	eqn getSet = {b: Nat | 1 == b};
]] parse succeeds

// TODO: we can't distinguish bagcomprehension from setcomprehension with NaBL2
test bag comprehension as result [[
	eqn getBag = { n: Nat | get };
]] parse succeeds

test set comprehension only allows a single var [[
	eqn getSet = {a,b:Pos | b == 1};
]] parse fails

test bag comprehension only allows a single var [[
	eqn getSet = {a,b:Pos | 2};
]] parse fails

test bracket as result [[
	eqn get = (5);
]] parse succeeds

test equation with no semicolon [[
	eqn get = 5
]] parse fails

test equation allows layout after eqn [[
	eqn
	get=5;
]] parse succeeds

test equation requires layout after eqn [[
	eqnget=5;
]] parse fails

test equation allows layout before = [[
	eqn get
	=5;
]] parse succeeds

test equation allows layout after = [[
	eqn get=
		5;
]] parse succeeds

test equation allows layout before ; [[
	eqn get=5
	;
]] parse succeeds


test no empty eqn [[
	eqn ;
]] parse fails

test multiple eqns [[
	eqn get = 5; yes = bool;
]] parse succeeds

test conditionals with expression [[
	eqn 1 > 3 -> get = 5;
]] parse succeeds

test condition with constant [[
	eqn true -> get=5;
]] parse succeeds

test layout required before condition [[
	eqn5>4->get=5;
]] parse fails

test layout before condition not required when using bracket [[
	eqn(5>4)->get=5;
]] parse succeeds

test no layout between -> of condition [[
	eqn 5>4 - > get=5;
]] parse fails

test layout before -> allowed in condition [[
	eqn 5>4
	->get=5;
]] parse succeeds

test layout after -> allowed in condition [[
	eqn 5>4->
	get=5;
]] parse succeeds

test multiple eqn definitions allowed [[
	eqn get=5;
	eqn yes = true;
]] parse succeeds

test defining operands [[
	sort A;
	cons a : Int -> A;
	var b, c : Int; eqn a(b) == a(c) = b == c;
]] parse succeeds
