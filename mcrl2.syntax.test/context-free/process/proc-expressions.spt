module proc-expressions
language mCRL2
start symbol MCRL2Spec

fixture [[
	init p;
	act a,b,c,d,e;
	proc p(x:Bool, y:Pos) = [[...]];
]]

test delta [[
	delta
]] parse succeeds

test tau [[
	tau
]] parse succeeds

test id [[
	a
]] parse succeeds

test process instantiation, single arg [[
	p(5 >= 3)
]] parse succeeds

test process instantiation, multiple args [[
	p(!(5>4) || false, 14)
]] parse succeeds

test process assignment, empty allowed [[
	p()
]] parse succeeds

test process assignment, single arg [[
	p(x=5>4 && true)
]] parse succeeds

test process assignment, multiple args [[
	p(y=5, x=true)
]] parse succeeds

test block, no empty set allowed [[
	block({}, tau)
]] parse fails

test block, single action [[
	block({a}, p.tau)
]] parse succeeds

test block, multiple actions [[
	block({a,b,c}, a.b+e)
]] parse succeeds

test block, no multi actions [[
	block({a|b}, tau)
]] parse fails

test hide, no empty set allowed [[
	hide({}, tau)
]] parse fails

test hide, single action [[
	hide({a}, p.tau)
]] parse succeeds

test hide, multiple actions [[
	hide({a,b,c}, a.b+e)
]] parse succeeds

test hide, no multi actions [[
	hide({a|b}, tau)
]] parse fails

test allow, empty set allowed [[
	allow({}, tau)
]] parse succeeds

test allow, no expressions [[
	allow({a+b}, tau)
]] parse fails

test allow, single action [[
	allow({a}, tau)
]] parse succeeds

test allow, multiple actions in single multi-action [[
	allow({a|b}, tau)
]] parse succeeds

test allow, multiple actions and multiple multi-actions [[
	allow({a|b, b|c|d}, tau)
]] parse succeeds

test rename, empty set allowed [[
	rename({}, tau)
]] parse succeeds

test rename, no expressions [[
	rename({a.b->c}, tau)
]] parse fails

test rename, single rename [[
	rename({a->b}, tau)
]] parse succeeds

test rename, multiple renames [[
	rename({a->b, b->c}, tau)
]] parse succeeds

test comm, empty set allowed [[
	comm({}, tau)
]] parse succeeds

// TODO: seems SPT can't handle when errors are thrown with broken regions...
// even if no selection reference is given in the test expectation
test comm, no single id allowed [[
	comm({a->b}, tau)
]] parse fails

test comm, single multiaction [[
	comm({a|b->c}, tau)
]] parse succeeds

test comm, no expressions allowed [[
	comm({a.b|c->d}, tau)
]] parse fails

test comm, multiple multiactions [[
	comm({a|b|c->d, b|c->a}, tau)
]] parse succeeds

test bracket [[
	(delta)
]] parse succeeds

test if [[
	true -> tau
]] parse succeeds

test if, bracket allowed [[
	([])->tau
]] parse succeeds

test if then else [[
	true -> a + b <> tau
]] parse succeeds

test if then else, bracket allowed [[
	({:})->a<>tau
]] parse succeeds

test @ [[
	a@4
]] parse succeeds

test @, bracket allowed [[
	a@(5-4*a)
]] parse succeeds
