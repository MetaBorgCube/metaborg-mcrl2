module mcrl2/syntax/Data

imports

  mcrl2/syntax/Common
  mcrl2/syntax/Sort
  mcrl2/syntax/Proc

template options

  keyword -/- [a-zA-Z\_0-9\'] // require layout after a keyword

context-free syntax //--- Data expressions

  VarDecl.VarDecl = <<ID> : <SortExpr>>

  VarsDecl.VarsDecl = <<{ID ", "}+> : <SortExpr>>

  DataExpr.DataRef         = <<ID>>
  DataExpr.Number          = <<NUM>>
  DataExpr.True            = <true>
  DataExpr.False           = <false>
  DataExpr.EmptyList       = <[ ]>  
  DataExpr.EmptySet        = <{ }>  
  DataExpr.EmptyBag        = <{ : }>
  DataExpr.ListEnum        = <[<{DataExpr ", "}+>]>
  DataExpr.BagEnum         = <{<{BagEnumElt ", "}+>}>
  DataExpr.SetBagComp      = <{ <VarDecl> | <DataExpr>  }>
  DataExpr.SetEnum         = <{<{DataExpr ", "}+>}>
  DataExpr                 = <(<DataExpr>)> {bracket}
  DataExpr.FunUpdate       = [[DataExpr]\[[DataExpr] -> [DataExpr]\]] {left}
  DataExpr.FunApp          = <<DataExpr>(<{DataExpr ","}+>)> {left}         
  DataExpr.Neg_SetCompl    = <!<DataExpr>>
  DataExpr.UnaryMinus      = <-<DataExpr>>
  DataExpr.ListSize        = <#<DataExpr>>
  DataExpr.ForAll          = <forall <{VarsDecl ", "}+> . <DataExpr>> {right}
  DataExpr.Exists          = <exists <{VarsDecl ", "}+> . <DataExpr>> {right}
  DataExpr.Lambda          = <lambda <{VarsDecl ", "}+> . <DataExpr>> {right}
  DataExpr.Impl            = [[DataExpr] => [DataExpr]] {right}
  DataExpr.Conj            = <<DataExpr> || <DataExpr>> {right}
  DataExpr.Disj            = <<DataExpr> && <DataExpr>> {right}
  DataExpr.Equal           = <<DataExpr> == <DataExpr>> {left}
  DataExpr.Inequal         = <<DataExpr> != <DataExpr>> {left}
  DataExpr.Smaller         = [[DataExpr] < [DataExpr]] {left}
  DataExpr.SmallerOrEqual  = [[DataExpr] <= [DataExpr]] {left}
  DataExpr.LargerOrEqual   = [[DataExpr] >= [DataExpr]] {left}
  DataExpr.Larger          = [[DataExpr] > [DataExpr]] {left}
  DataExpr.Member          = <<DataExpr> in <DataExpr>> {left}
  DataExpr.ListCons        = [[DataExpr] |> [DataExpr]] {right}
  DataExpr.ListSnoc        = [[DataExpr] <| [DataExpr]] {left}
  DataExpr.ListConc        = <<DataExpr> ++ <DataExpr>> {left}
  DataExpr.Add_SetBagUnion = <<DataExpr> + <DataExpr>> {left}
  DataExpr.Sub_SetBagDiff  = <<DataExpr> - <DataExpr>> {left}
  DataExpr.Div             = <<DataExpr> / <DataExpr>> {left}
  DataExpr.IntDiv          = <<DataExpr> div <DataExpr>> {left}
  DataExpr.IntMod          = <<DataExpr> mod <DataExpr>> {left}
  DataExpr.Mul_SetBagIsect = <<DataExpr> * <DataExpr>> {left}
  DataExpr.EltAt           = <<DataExpr> . <DataExpr>> {left}
  DataExpr.Where           = <<DataExpr> whr <{Assignment ", "}+> end> {left}
  DataExpr.As              = <<DataExpr> : <SortExpr>> /* extension */

  Assignment.Assign = <<ID> = <DataExpr>>

  BagEnumElt.BagEnumElt = <<DataExpr> : <DataExpr>>

context-free priorities

  /* 13 */ { left:
    DataExpr.FunUpdate
    DataExpr.FunApp
  }
  >
  /* 12 (unary) */ {
    DataExpr.Neg_SetCompl
    DataExpr.UnaryMinus
    DataExpr.ListSize
  }
  >
  /* 12 (binary) */ { left:
    DataExpr.Mul_SetBagIsect
    DataExpr.EltAt
  }
  >
  /* 11 */ { left:
    DataExpr.Div
    DataExpr.IntDiv
    DataExpr.IntMod
  }
  >
  /* 10 */ { left:
    DataExpr.Add_SetBagUnion
    DataExpr.Sub_SetBagDiff
  }
  >
  /* 9 */ { left:
    DataExpr.ListConc
  }
  >
  /* 8 */ { left:
    DataExpr.ListSnoc
  }
  >
  /* 7 */ { right:
    DataExpr.ListCons
  }
  >
  /* 6 */ { left:
    DataExpr.Smaller
    DataExpr.SmallerOrEqual
    DataExpr.LargerOrEqual
    DataExpr.Larger
    DataExpr.Member
  }
  >
  /* 5 */ { left:
    DataExpr.Equal
    DataExpr.Inequal
  }
  >
  /* 4 */ { right:
    DataExpr.Disj
  }
  >
  /* 3 */ { right:
    DataExpr.Conj
  }
  >
  /* 2 */ { right:
    DataExpr.Impl
  }
  >
  /* 1 */ { right:
    DataExpr.ForAll
    DataExpr.Exists
    DataExpr.Lambda
  }
  >
  /* 0 */ { left:
    DataExpr.Where
  }
