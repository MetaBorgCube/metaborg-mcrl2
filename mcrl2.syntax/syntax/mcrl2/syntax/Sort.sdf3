module mcrl2/syntax/Sort //--- Sort expressions and sort declarations

imports

  mcrl2/syntax/Common

template options

  keyword -/- [a-zA-Z\_0-9\'] // require layout after a keyword

context-free syntax //--- Sort expressions and sort declarations

  SortExpr.Bool     = <Bool>
  SortExpr.Pos      = <Pos>
  SortExpr.Nat      = <Nat>
  SortExpr.Int      = <Int>
  SortExpr.Real     = <Real>
  SortExpr.List     = <List (<SortExpr>)>
  SortExpr.Set      = <Set (<SortExpr>)>
  SortExpr.Bag      = <Bag (<SortExpr>)>
  SortExpr.SortRef  = ID
  SortExpr          = <(<SortExpr>)> {bracket}
  SortExpr.Struct   = <struct <{ConstrDecl " | "}+>>
  SortExpr.Function = [[SortExpr] -> [SortExpr]] {right}
  SortExpr.Product  = Product
  Product = <<SortExpr> # <{SortExpr " # "}+>>

  SortProduct = SortExpr

  SortSpec.SortSpec = <sort <{SortDecl " "}+>>

  SortDecl.SortDecl  = <<{ID ", "}+>;>
  SortDecl.SortAlias = <<ID> = <SortExpr>;>

  ConstrDecl.ConstrDecl = <<ID><ConstrDecl-Projs?><ConstrDecl-Recog?>>
  ConstrDecl-Projs       = <(<{ProjDecl ", "}+>)>
  ConstrDecl-Recog.Recog = <?<ID>>

  ProjDecl.ProjDecl = <<ProjDecl-Id?><SortExpr>>
  ProjDecl-Id = <<ID> : >

context-free syntax //--- Constructors and mappings

  IdsDecl.IdsDecl = <<{ID ", "}+> : <SortExpr>>
  
  ConsSpec.ConsSpec = <cons <ConsSpec-Decl+>>
  ConsSpec-Decl = <<IdsDecl>;>

  MapSpec.MapSpec = <map <MapSpec-Decl+>>
  MapSpec-Decl = <<IdsDecl>;>

context-free priorities

  /* 1 */ { left:
    SortExpr.Product
  }
  >
  /* 0 */ { right:
    SortExpr.Function
  }
